// WebAR –ê—Ç–æ–º –õ—ñ—Ç—ñ—é - main.js
class LithiumAtomAR {
    constructor() {
        this.scene = null;
        this.camera = null;
        this.renderer = null;
        this.atomGroup = null;
        this.nucleus = null;
        this.electrons = [];
        this.isARActive = false;
        this.animationId = null;
        this.hitTestSource = null;
        this.hitTestSourceRequested = false;
        this.reticle = null;
        this.atomPlaced = false;
        
        this.init();
    }

    init() {
        this.setupEventListeners();
        this.checkARSupport();
    }

    setupEventListeners() {
        const arButton = document.getElementById('ar-button');
        arButton.addEventListener('click', () => this.startAR());
    }

    async checkARSupport() {
        const arButton = document.getElementById('ar-button');
        const errorDiv = document.getElementById('error');
        const errorMessage = document.getElementById('error-message');

        if ('xr' in navigator) {
            try {
                const isSupported = await navigator.xr.isSessionSupported('immersive-ar');
                if (!isSupported) {
                    arButton.textContent = 'üì± –î–µ–º–æ —Ä–µ–∂–∏–º';
                    errorMessage.textContent = 'AR –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è. –ë—É–¥–µ –∑–∞–ø—É—â–µ–Ω–æ –¥–µ–º–æ —Ä–µ–∂–∏–º.';
                }
            } catch (error) {
                console.warn('AR –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–∞:', error);
                arButton.textContent = 'üì± –î–µ–º–æ —Ä–µ–∂–∏–º';
                errorMessage.textContent = 'AR –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è. –ë—É–¥–µ –∑–∞–ø—É—â–µ–Ω–æ –¥–µ–º–æ —Ä–µ–∂–∏–º.';
            }
        } else {
            arButton.textContent = 'üì± –î–µ–º–æ —Ä–µ–∂–∏–º';
            errorMessage.textContent = 'WebXR –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è. –ë—É–¥–µ –∑–∞–ø—É—â–µ–Ω–æ –¥–µ–º–æ —Ä–µ–∂–∏–º.';
        }
    }

    setupThreeJS() {
        // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ü–µ–Ω–∏
        this.scene = new THREE.Scene();

        // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–∞–º–µ—Ä–∏ –¥–ª—è AR
        this.camera = new THREE.PerspectiveCamera(
            70,
            window.innerWidth / window.innerHeight,
            0.01,
            20
        );

        // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é AR
        this.renderer = new THREE.WebGLRenderer({
            antialias: true,
            alpha: true
        });
        this.renderer.setPixelRatio(window.devicePixelRatio);
        this.renderer.setSize(window.innerWidth, window.innerHeight);
        this.renderer.xr.enabled = true;
        this.renderer.shadowMap.enabled = true;
        this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;
        
        document.getElementById('container').appendChild(this.renderer.domElement);

        // –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è –¥–ª—è AR
        this.setupARLighting();

        // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞—Ç–æ–º–∞ –ª—ñ—Ç—ñ—é
        this.createLithiumAtom();

        // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µticle –¥–ª—è AR
        this.createReticle();
    }

    setupARLighting() {
        // –ê–º–±—ñ—î–Ω—Ç–Ω–µ –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è –¥–ª—è AR - –º–µ–Ω—à–µ, —â–æ–± –∑–±–µ—Ä–µ–≥—Ç–∏ —Ä–µ–∞–ª—å–Ω—ñ—Å—Ç—å
        const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);
        this.scene.add(ambientLight);

        // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–µ –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è
        const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
        directionalLight.position.set(1, 1, 1);
        directionalLight.castShadow = true;
        directionalLight.shadow.mapSize.width = 1024;
        directionalLight.shadow.mapSize.height = 1024;
        this.scene.add(directionalLight);
    }

    createReticle() {
        const geometry = new THREE.RingGeometry(0.15, 0.2, 32).rotateX(-Math.PI / 2);
        const material = new THREE.MeshBasicMaterial({
            color: 0xff6b6b,
            transparent: true,
            opacity: 0.5
        });
        this.reticle = new THREE.Mesh(geometry, material);
        this.reticle.matrixAutoUpdate = false;
        this.reticle.visible = false;
        this.scene.add(this.reticle);
    }

    createLithiumAtom() {
        this.atomGroup = new THREE.Group();

        // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —è–¥—Ä–∞ (3 –ø—Ä–æ—Ç–æ–Ω–∏ + 4 –Ω–µ–π—Ç—Ä–æ–Ω–∏)
        this.createNucleus();

        // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–ª–µ–∫—Ç—Ä–æ–Ω—ñ–≤
        this.createElectrons();

        // –ü–æ—á–∞—Ç–∫–æ–≤–µ –ø–æ–∑–∏—Ü—ñ–æ–Ω—É–≤–∞–Ω–Ω—è (–±—É–¥–µ –∑–º—ñ–Ω–µ–Ω–æ –≤ AR)
        this.atomGroup.position.set(0, 0, -1);
        this.atomGroup.scale.set(0.3, 0.3, 0.3); // –ó–º–µ–Ω—à—É—î–º–æ –¥–ª—è AR
        
        // –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–∏—Ö–æ–≤–∞–Ω–∏–π, –ø–æ–∫–∏ –Ω–µ –±—É–¥–µ —Ä–æ–∑–º—ñ—â–µ–Ω–∏–π –≤ AR
        this.atomGroup.visible = false;
        
        this.scene.add(this.atomGroup);
    }

    createNucleus() {
        // –Ø–¥—Ä–æ –ª—ñ—Ç—ñ—é
        const nucleusGeometry = new THREE.SphereGeometry(0.4, 32, 32);
        const nucleusMaterial = new THREE.MeshPhongMaterial({
            color: 0x888888,
            shininess: 100,
            transparent: true,
            opacity: 0.3
        });

        this.nucleus = new THREE.Mesh(nucleusGeometry, nucleusMaterial);
        
        // –î–æ–¥–∞—î–º–æ –ø—Ä–æ—Ç–æ–Ω–∏ (—á–µ—Ä–≤–æ–Ω—ñ —Å—Ñ–µ—Ä–∏)
        for (let i = 0; i < 3; i++) {
            const protonGeometry = new THREE.SphereGeometry(0.12, 16, 16);
            const protonMaterial = new THREE.MeshPhongMaterial({ 
                color: 0xff3333,
                shininess: 80
            });
            const proton = new THREE.Mesh(protonGeometry, protonMaterial);
            
            const angle = (i / 3) * Math.PI * 2;
            proton.position.set(
                Math.cos(angle) * 0.2,
                Math.sin(angle) * 0.2,
                (i % 2) * 0.15 - 0.075
            );
            
            this.nucleus.add(proton);
        }

        // –î–æ–¥–∞—î–º–æ –Ω–µ–π—Ç—Ä–æ–Ω–∏ (—Å–∏–Ω—ñ —Å—Ñ–µ—Ä–∏)
        for (let i = 0; i < 4; i++) {
            const neutronGeometry = new THREE.SphereGeometry(0.12, 16, 16);
            const neutronMaterial = new THREE.MeshPhongMaterial({ 
                color: 0x3366ff,
                shininess: 80
            });
            const neutron = new THREE.Mesh(neutronGeometry, neutronMaterial);
            
            const angle = (i / 4) * Math.PI * 2 + Math.PI / 4;
            neutron.position.set(
                Math.cos(angle) * 0.18,
                Math.sin(angle) * 0.18,
                (i % 2) * 0.12 - 0.06
            );
            
            this.nucleus.add(neutron);
        }

        this.atomGroup.add(this.nucleus);
    }

    createElectrons() {
        const electronGeometry = new THREE.SphereGeometry(0.08, 16, 16);
        const electronMaterial = new THREE.MeshPhongMaterial({
            color: 0x00ff00,
            shininess: 100,
            emissive: 0x002200
        });

        // –ü–µ—Ä—à–∞ –æ—Ä–±—ñ—Ç–∞ (K-–æ–±–æ–ª–æ–Ω–∫–∞): 2 –µ–ª–µ–∫—Ç—Ä–æ–Ω–∏
        for (let i = 0; i < 2; i++) {
            const electron = new THREE.Mesh(electronGeometry, electronMaterial);
            electron.userData = { 
                orbitRadius: 1.0,
                orbitSpeed: 3,
                orbitOffset: i * Math.PI,
                orbitTilt: 0,
                shell: 'K'
            };
            this.electrons.push(electron);
            this.atomGroup.add(electron);
        }

        // –î—Ä—É–≥–∞ –æ—Ä–±—ñ—Ç–∞ (L-–æ–±–æ–ª–æ–Ω–∫–∞): 1 –µ–ª–µ–∫—Ç—Ä–æ–Ω
        const electron3 = new THREE.Mesh(electronGeometry, electronMaterial);
        electron3.userData = { 
            orbitRadius: 1.6,
            orbitSpeed: 2,
            orbitOffset: 0,
            orbitTilt: Math.PI / 4,
            shell: 'L'
        };
        this.electrons.push(electron3);
        this.atomGroup.add(electron3);

        // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ—Ä–±—ñ—Ç–∞–ª—å–Ω–∏—Ö –∫—ñ–ª–µ—Ü—å –¥–ª—è –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó
        this.createOrbitRings();
    }

    createOrbitRings() {
        // –ö—ñ–ª—å—Ü–µ –¥–ª—è K-–æ–±–æ–ª–æ–Ω–∫–∏
        const ring1Geometry = new THREE.RingGeometry(0.98, 1.02, 64);
        const ring1Material = new THREE.MeshBasicMaterial({
            color: 0xffffff,
            transparent: true,
            opacity: 0.2,
            side: THREE.DoubleSide
        });
        const ring1 = new THREE.Mesh(ring1Geometry, ring1Material);
        ring1.rotation.x = Math.PI / 2;
        this.atomGroup.add(ring1);

        // –ö—ñ–ª—å—Ü–µ –¥–ª—è L-–æ–±–æ–ª–æ–Ω–∫–∏
        const ring2Geometry = new THREE.RingGeometry(1.58, 1.62, 64);
        const ring2Material = new THREE.MeshBasicMaterial({
            color: 0xffffff,
            transparent: true,
            opacity: 0.15,
            side: THREE.DoubleSide
        });
        const ring2 = new THREE.Mesh(ring2Geometry, ring2Material);
        ring2.rotation.x = Math.PI / 2 + Math.PI / 4;
        this.atomGroup.add(ring2);
    }

    async startAR() {
        const arButton = document.getElementById('ar-button');
        const loadingDiv = document.getElementById('loading');
        const errorDiv = document.getElementById('error');
        const arControls = document.getElementById('ar-controls');

        try {
            arButton.classList.add('hidden');
            loadingDiv.classList.remove('hidden');

            // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Three.js
            this.setupThreeJS();

            if ('xr' in navigator && await navigator.xr.isSessionSupported('immersive-ar')) {
                // –ó–∞–ø—É—Å–∫ AR —Å–µ—Å—ñ—ó
                const session = await navigator.xr.requestSession('immersive-ar', {
                    requiredFeatures: ['local'],
                    optionalFeatures: ['hit-test']
                });

                await this.renderer.xr.setSession(session);
                this.isARActive = true;
                
                // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è hit-test –¥–ª—è —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –æ–±'—î–∫—Ç—ñ–≤
                session.requestReferenceSpace('viewer').then((referenceSpace) => {
                    session.requestHitTestSource({ space: referenceSpace }).then((source) => {
                        this.hitTestSource = source;
                    });
                });

                // –û–±—Ä–æ–±–∫–∞ –∫–ª—ñ–∫—ñ–≤/—Ç–æ—Ä–∫–∞–Ω—å –¥–ª—è —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –∞—Ç–æ–º–∞
                this.renderer.domElement.addEventListener('click', this.onSelect.bind(this));
                this.renderer.domElement.addEventListener('touchend', this.onSelect.bind(this));
                
                // –ó–∞–ø—É—Å–∫ –∞–Ω—ñ–º–∞—Ü—ñ—ó
                this.renderer.setAnimationLoop((time, frame) => this.animate(time, frame));
                
                loadingDiv.classList.add('hidden');
                arControls.classList.remove('hidden');
                
                session.addEventListener('end', () => {
                    this.endAR();
                });

            } else {
                // –î–µ–º–æ —Ä–µ–∂–∏–º –±–µ–∑ AR
                this.startDemoMode();
                loadingDiv.classList.add('hidden');
            }

        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É AR:', error);
            loadingDiv.classList.add('hidden');
            
            // –ó–∞–ø—É—Å–∫ –¥–µ–º–æ —Ä–µ–∂–∏–º—É —è–∫ fallback
            this.startDemoMode();
        }
    }

    onSelect(event) {
        if (!this.isARActive || this.atomPlaced) return;

        if (this.reticle.visible) {
            // –†–æ–∑–º—ñ—â—É—î–º–æ –∞—Ç–æ–º –≤ –ø–æ–∑–∏—Ü—ñ—ó reticle
            this.atomGroup.position.setFromMatrixPosition(this.reticle.matrix);
            this.atomGroup.visible = true;
            this.atomPlaced = true;
            this.reticle.visible = false;

            // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó
            const arControls = document.getElementById('ar-controls');
            arControls.innerHTML = '‚úÖ –ê—Ç–æ–º —Ä–æ–∑–º—ñ—â–µ–Ω–æ! –†—É—Ö–∞–π—Ç–µ –∫–∞–º–µ—Ä—É –¥–ª—è –æ–≥–ª—è–¥—É';
        }
    }

    startDemoMode() {
        if (!this.scene) this.setupThreeJS();
        
        // –ü–æ–∑–∏—Ü—ñ–æ–Ω—É–≤–∞–Ω–Ω—è –∫–∞–º–µ—Ä–∏ –¥–ª—è –¥–µ–º–æ —Ä–µ–∂–∏–º—É
        this.camera.position.set(0, 0, 3);
        this.camera.lookAt(0, 0, 0);
        
        // –í –¥–µ–º–æ —Ä–µ–∂–∏–º—ñ –ø–æ–∫–∞–∑—É—î–º–æ –∞—Ç–æ–º –≤—ñ–¥—Ä–∞–∑—É
        if (this.atomGroup) {
            this.atomGroup.position.set(0, 0, 0);
            this.atomGroup.scale.set(0.5, 0.5, 0.5);
            this.atomGroup.visible = true;
            this.atomPlaced = true;
        }
        
        // –ó–∞–ø—É—Å–∫ –∞–Ω—ñ–º–∞—Ü—ñ—ó
        this.renderer.setAnimationLoop((time) => this.animate(time));
        
        // –î–æ–¥–∞—î–º–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏ –º–∏—à—ñ –¥–ª—è –¥–µ–º–æ —Ä–µ–∂–∏–º—É
        this.addMouseControls();

        // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –¥–µ–º–æ —Ä–µ–∂–∏–º
        const arControls = document.getElementById('ar-controls');
        arControls.innerHTML = 'üñ±Ô∏è –î–µ–º–æ —Ä–µ–∂–∏–º: —Ä—É—Ö–∞–π—Ç–µ –º–∏—à–µ—é –¥–ª—è –æ–≥–ª—è–¥—É –∞—Ç–æ–º–∞';
        arControls.classList.remove('hidden');
    }

    addMouseControls() {
        if (this.isARActive) return;
        
        let mouseX = 0, mouseY = 0;
        let isMouseDown = false;
        
        const handleMouseMove = (event) => {
            if (this.isARActive) return;
            
            const deltaX = event.clientX - mouseX;
            const deltaY = event.clientY - mouseY;
            
            if (isMouseDown && this.atomGroup) {
                this.atomGroup.rotation.y += deltaX * 0.01;
                this.atomGroup.rotation.x += deltaY * 0.01;
            }
            
            mouseX = event.clientX;
            mouseY = event.clientY;
        };

        const handleMouseDown = () => {
            isMouseDown = true;
        };

        const handleMouseUp = () => {
            isMouseDown = false;
        };

        const handleTouchMove = (event) => {
            if (this.isARActive || event.touches.length !== 1) return;
            
            const touch = event.touches[0];
            const deltaX = touch.clientX - mouseX;
            const deltaY = touch.clientY - mouseY;
            
            if (this.atomGroup) {
                this.atomGroup.rotation.y += deltaX * 0.01;
                this.atomGroup.rotation.x += deltaY * 0.01;
            }
            
            mouseX = touch.clientX;
            mouseY = touch.clientY;
        };
        
        document.addEventListener('mousemove', handleMouseMove);
        document.addEventListener('mousedown', handleMouseDown);
        document.addEventListener('mouseup', handleMouseUp);
        document.addEventListener('touchmove', handleTouchMove);
    }

    animate(time, frame) {
        if (!this.atomGroup) return;

        const elapsedTime = time * 0.001;

        // –û–±–µ—Ä—Ç–∞–Ω–Ω—è —è–¥—Ä–∞
        if (this.nucleus) {
            this.nucleus.rotation.y = elapsedTime * 0.5;
            this.nucleus.rotation.x = elapsedTime * 0.3;
        }

        // –ê–Ω—ñ–º–∞—Ü—ñ—è –µ–ª–µ–∫—Ç—Ä–æ–Ω—ñ–≤ –ø–æ –æ—Ä–±—ñ—Ç–∞—Ö
        this.electrons.forEach((electron) => {
            const userData = electron.userData;
            const angle = elapsedTime * userData.orbitSpeed + userData.orbitOffset;
            
            electron.position.set(
                Math.cos(angle) * userData.orbitRadius,
                Math.sin(angle * 0.7) * userData.orbitRadius * 0.3,
                Math.sin(angle) * userData.orbitRadius * Math.cos(userData.orbitTilt)
            );

            // –í–ª–∞—Å–Ω–µ –æ–±–µ—Ä—Ç–∞–Ω–Ω—è –µ–ª–µ–∫—Ç—Ä–æ–Ω—ñ–≤
            electron.rotation.y = elapsedTime * 8;
        });

        // AR hit-test –ª–æ–≥—ñ–∫–∞
        if (this.isARActive && frame && this.hitTestSource && !this.atomPlaced) {
            const referenceSpace = this.renderer.xr.getReferenceSpace();
            const hitTestResults = frame.getHitTestResults(this.hitTestSource);

            if (hitTestResults.length > 0) {
                const hit = hitTestResults[0];
                this.reticle.visible = true;
                this.reticle.matrix.fromArray(hit.getPose(referenceSpace).transform.matrix);
            } else {
                this.reticle.visible = false;
            }
        }

        // –í –¥–µ–º–æ —Ä–µ–∂–∏–º—ñ –¥–æ–¥–∞—î–º–æ –∞–≤—Ç–æ–æ–±–µ—Ä—Ç–∞–Ω–Ω—è
        if (!this.isARActive && this.atomGroup) {
            this.atomGroup.rotation.y += 0.003;
        }

        this.renderer.render(this.scene, this.camera);
    }

    endAR() {
        this.isARActive = false;
        this.atomPlaced = false;
        const arButton = document.getElementById('ar-button');
        const arControls = document.getElementById('ar-controls');
        
        arButton.classList.remove('hidden');
        arControls.classList.add('hidden');
        
        if (this.animationId) {
            cancelAnimationFrame(this.animationId);
        }

        // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ —Ä–µ–Ω–¥–µ—Ä–µ—Ä
        if (this.renderer && this.renderer.domElement) {
            document.getElementById('container').removeChild(this.renderer.domElement);
        }
    }

    onWindowResize() {
        if (!this.camera || !this.renderer) return;
        
        this.camera.aspect = window.innerWidth / window.innerHeight;
        this.camera.updateProjectionMatrix();
        this.renderer.setSize(window.innerWidth, window.innerHeight);
    }
}

// –û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ —Ä–æ–∑–º—ñ—Ä—É –≤—ñ–∫–Ω–∞
window.addEventListener('resize', () => {
    if (window.lithiumAtomAR) {
        window.lithiumAtomAR.onWindowResize();
    }
});

// –ó–∞–ø—É—Å–∫ –¥–æ–¥–∞—Ç–∫—É –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è DOM
document.addEventListener('DOMContentLoaded', () => {
    window.lithiumAtomAR = new LithiumAtomAR();
});
